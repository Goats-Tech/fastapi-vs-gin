// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: queries.sql

package sqlc

import (
	"context"
)

const readRows = `-- name: ReadRows :many
SELECT id, name, value
FROM products
LIMIT 100
`

func (q *Queries) ReadRows(ctx context.Context) ([]Products, error) {
	rows, err := q.query(ctx, q.readRowsStmt, readRows)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Products{}
	for rows.Next() {
		var i Products
		if err := rows.Scan(&i.ID, &i.Name, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const writeRows = `-- name: WriteRows :exec
INSERT INTO products (name, value)
VALUES ($1, $2)
`

type WriteRowsParams struct {
	Name  string
	Value int32
}

func (q *Queries) WriteRows(ctx context.Context, arg WriteRowsParams) error {
	_, err := q.exec(ctx, q.writeRowsStmt, writeRows, arg.Name, arg.Value)
	return err
}
